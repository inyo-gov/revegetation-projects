---
title: "2024 Data: Laws Parcels 90, 94 & 95 "
format: 
  html: 
    grid:
      sidebar-width: 20px
      body-width: 1200px
    toc: true
    toc-depth: 3
    anchor-sections: true
    smooth-scroll: true
    code-fold: true
    code-summary: "code"
    code-line-numbers: true
    code-overflow: wrap
    code-link: true
    html-math-method: katex
tbl-cap-location: top   
affiliation: "Inyo County Water Department"
date: "2024-09-20"
date-modified: "2024-09-20"
citation:
  type: report
  container-title: "Data Report"
  publisher: "Inyo County Water Department"
  issued: "2024-09-20"
  url: https://github.com/inyo-gov/revegetation-projects
google-scholar: true
---

# summary

1.  Parcel-average native perennial cover 10% or greater?
    -   Laws 90: ✔️
    -   Laws 94: ❌ - 9.7%
    -   Laws 95: ✔️
2.  At least six species have at least 3 hits across all transects? ✔️
    -   Laws 90: ✔️
    -   Laws 94: ✔️
    -   Laws 95: ✔️
3.  Species richness for each parcel \>= 10 species? ✔️
    -   Laws 90: ✔️
    -   Laws 94: ✔️
    -   Laws 95: ✔️
4.  Each transect has 2% cover?
    -   Laws 90: ✔️
    -   Laws 94: ✔️
    -   Laws 95: ❌-transect 35 at 1%.
5.  A grass species is present on each parcel? ✔️
    -   Laws 90: ✔️
    -   Laws 94: ✔️
    -   Laws 95: ✔️

```{r setup, message = FALSE, warning = FALSE, echo=FALSE}

library(tidyverse)
library(sf)
library(ggdist)
library(gt)
library(gtExtras)
library(here)
library(patchwork)
library(ggrepel)
library(DT)

# source functions----
source(here('code','reveg24.R'))

knitr::opts_chunk$set(echo = FALSE, 
                      fig.show = "hold", 
                      message = FALSE, 
                      warning = FALSE)
options(tidyverse.quiet = TRUE)
```

```{r data}

# parcel shapefile
parcels_shp <- st_read(here('data','LA_parcels_rasterizedd.shp'), quiet = TRUE)
# grab the crs from another shapefile in NAD83 z11 to apply to the xy coordinates.

reveg_crs <- st_crs(parcels_shp)
# species codes to attributes lookup table
species <- read.csv(here("data","species.csv"))

# 2022 data
reveg_data22 <- read_csv(here('data','laws_reveg_data_2022.csv')) %>% mutate(year = 2022) 
# transect xy coordinates
reveg_xy <- read_csv(here('data','laws_reveg_transects.csv'))
xy <- st_as_sf(reveg_xy, coords = c("x", "y"), crs =reveg_crs)

# 2024 data
reveg_data24 <- read_csv(here('data','laws_reveg_data_2024.csv') )%>% mutate(year = 2024) 
# merge 2022 and 2024
reveg_data <- bind_rows(reveg_data22,reveg_data24) %>% rename(hits = cover)

# join xy location to all the data (transect totals by species)
reveg_sp_count_xy <- reveg_data %>% left_join(reveg_xy, by = c("parcel","transect"))


# create a simple features layer from the xy points and the crs 
rscxy <- st_as_sf(reveg_sp_count_xy, coords = c("x", "y"), crs =reveg_crs)

# join species attributes such as common name to the xy plotted species codes.
r1 <- rscxy %>% left_join(species, by = c("species" = "Code")) %>% mutate(percent_cover = hits*.5)

# non-spatial
# join species attribute data - links code to functional type
r2 <- reveg_sp_count_xy %>% left_join(species, by = c("species" = "Code"))

# non-spatial
r3 <- r2 %>% mutate(tcov = hits*1/200*100)# (other locations simplified to * .5) 200 possible hits on a 50 m transect every 25 cm. hits/possible for fractional cover and * 100 to convert to percentage 0-100..

parcels_shp <- st_transform(parcels_shp, crs = st_crs(r1))  

```


```{r map-subsets}
# subset parcel sf points
# create subset into four simple feature sf dataframes
rlaw90<- r1 %>% filter(parcel %in% c("LAW090"))
rlaw95<- r1 %>% filter(parcel %in% c("LAW095"))
rlaw94<- r1 %>% filter(parcel %in% c("LAW094"))
# rlaw118_129<- r1 %>% filter(parcel %in% c("LAW118","LAW129"))
```

# parcel-year-species-cover

species cover averaged across all 20 transects within the parcel

```{r}
r1 %>%
  select(year, parcel, transect, species, CommonName, percent_cover, -geometry) %>%
  group_by(parcel, year, species, CommonName) %>%
  summarise(mean_cover = sum(percent_cover) / 20,
            transects_hit = n(),
            .groups = 'drop') %>%
  arrange(parcel, species, year) %>%
  datatable(
    options = list(
      autoWidth = TRUE,    # Ensure the table takes full width
      scrollX = TRUE,      # Enable horizontal scrolling if needed
      columnDefs = list(list(width = '100%', targets = "_all")),  # Set all columns to 100% width
      dom = 'lBfrtip',     # Change 'Bfrtip' to 'lBfrtip' to put length menu before the buttons
      buttons = c('csv'),  # Specify 'csv' as the button type
      lengthMenu = list(c(10, 25, 50, -1), c('10', '25', '50', 'All')),  # Allow row selection
      pageLength = 10,     # Default number of rows per page
      searching = TRUE     # Enable column search
    ),
    extensions = 'Buttons', # Enable Buttons extension
    filter = 'top'          # Enable filtering options for each column
  )

```


# parcel-year-transect-functional type-cover

functional type cover aggregated at transect and averaged to parcel
```{r full}

# wide view, spreading functional types into columns
full_noERNAATTO <- r2 %>% filter(!species %in% c("ERNA10","ATTO")) %>%
summarise_reveg_to_transect()

full <- r2 %>%
summarise_reveg_to_transect()


full%>% 
  datatable(
    options = list(
      autoWidth = TRUE,    # Ensure the table takes full width
      scrollX = TRUE,      # Enable horizontal scrolling if needed
      columnDefs = list(list(width = '100%', targets = "_all")),  # Set all columns to 100% width
      dom = 'Bfrtip',   # Add buttons to the table (B)
      buttons = c('csv')  # Specify 'csv' as the button type
    ),
    extensions = 'Buttons', # Enable Buttons extension
    filter = 'top'          # Enable filtering options for each column  # Enable Buttons extension
  )
```
# parcel-year-functional type cover

functional type cover and total perennial cover aggregated at parcel
```{r parcel-sum}
# 
parcel_sum_f <- summarise_to_parcel(full_noERNAATTO)
parcel_sum <- summarise_to_parcel(full)

parcel_sum %>% filter(year == 2024)%>% 
  datatable(
    options = list(
      autoWidth = TRUE,    # Ensure the table takes full width
      scrollX = TRUE,      # Enable horizontal scrolling if needed
      columnDefs = list(list(width = '100%', targets = "_all")),  # Set all columns to 100% width
      dom = 'Bfrtip',   # Add buttons to the table (B)
      buttons = c('csv')  # Specify 'csv' as the button type
    ),
    extensions = 'Buttons', # Enable Buttons extension
    filter = 'top'          # Enable filtering options for each column  
  )
```

# parcel-year-functional type cover - without ATTO and ERNA10

functional type cover and total perennial cover subtracting out ATTO/ERNA. 
```{r}
parcel_sum_f %>% filter(year == 2024)%>% 
  datatable(
    options = list(
      autoWidth = TRUE,    # Ensure the table takes full width
      scrollX = TRUE,      # Enable horizontal scrolling if needed
      columnDefs = list(list(width = '100%', targets = "_all")),  # Set all columns to 100% width
      dom = 'Bfrtip',   # Add buttons to the table (B)
      buttons = c('csv')  # Specify 'csv' as the button type
    ),
    extensions = 'Buttons', # Enable Buttons extension
    filter = 'top'          # Enable filtering options for each column
  )
```



```{r count-grass-species}
count_grass_species <- r3 %>% filter(year == 2024, Lifeform == 'Grass') %>% select(parcel,transect,species,Genus, Species,Lifecycle,CommonName) %>% arrange(parcel,transect,Genus) %>% group_by(parcel) %>% summarise(grass_species = n())

# count_grass_species%>% 
#   datatable(
#     options = list(
#       autoWidth = TRUE,    # Ensure the table takes full width
#       scrollX = TRUE,      # Enable horizontal scrolling if needed
#       columnDefs = list(list(width = '100%', targets = "_all")),  # Set all columns to 100% width
#       dom = 'Bfrtip',   # Add buttons to the table (B)
#       buttons = c('csv')  # Specify 'csv' as the button type
#     ),
#     extensions = 'Buttons'  # Enable Buttons extension
#   )
```

```{r species-hit}
species_hit <- r2 %>% 
  filter(Lifecycle == 'Perennial') %>% 
  group_by(parcel,species) %>% 
  summarise(species_hits = sum(hits)) %>% 
  filter(species_hits >= 3) %>% ungroup()
```


```{r species-rich}

species_rich <- r2 %>% 
  filter(Lifecycle == 'Perennial') %>% 
  group_by(parcel,species) %>% 
  summarise(species_hits = sum(hits)) %>% 
  ungroup()

# species_rich%>% 
#   datatable(
#     options = list(
#       autoWidth = TRUE,    # Ensure the table takes full width
#       scrollX = TRUE,      # Enable horizontal scrolling if needed
#       columnDefs = list(list(width = '100%', targets = "_all")),  # Set all columns to 100% width
#       dom = 'Bfrtip',   # Add buttons to the table (B)
#       buttons = c('csv')  # Specify 'csv' as the button type
#     ),
#     extensions = 'Buttons'  # Enable Buttons extension
#   )
```


```{r species-hit-per-parcel}

count_hit_species_per_parcel <- species_hit %>% filter(parcel != 'LAW129') %>% group_by(parcel) %>% summarise(count_3hit_species = n())

# count_hit_species_per_parcel%>% 
#   datatable(
#     options = list(
#       autoWidth = TRUE,    # Ensure the table takes full width
#       scrollX = TRUE,      # Enable horizontal scrolling if needed
#       columnDefs = list(list(width = '100%', targets = "_all")),  # Set all columns to 100% width
#       dom = 'Bfrtip',   # Add buttons to the table (B)
#       buttons = c('csv')  # Specify 'csv' as the button type
#     ),
#     extensions = 'Buttons'  # Enable Buttons extension
#   )
```


```{r species-rich-per-parcel}
species_richness_parcel <- species_rich %>%
  filter(parcel != 'LAW129') %>%
  group_by(parcel) %>%
  summarise(sp_richness = n_distinct(species))

# species_richness_parcel%>% 
#   datatable(
#     options = list(
#       autoWidth = TRUE,    # Ensure the table takes full width
#       scrollX = TRUE,      # Enable horizontal scrolling if needed
#       columnDefs = list(list(width = '100%', targets = "_all")),  # Set all columns to 100% width
#       dom = 'Bfrtip',   # Add buttons to the table (B)
#       buttons = c('csv')  # Specify 'csv' as the button type
#     ),
#     extensions = 'Buttons'  # Enable Buttons extension
#   )
```

# parcel-year-transect-totalhits
perennial, non-weeds

```{r transect-cover-2perc}

# Function to summarize tcov and check if transect meets the 2% cover threshold
summarize_transect_cover_filtered <- function(data) {
  data %>%
    # Pre-filter out the "weed" category in Veg_Type
    filter(Veg_Type != "weed", Lifecycle == 'Perennial') %>%
    group_by(parcel, year,transect) %>%
    summarise(
      total_hits = sum(hits, na.rm = TRUE),  # Calculate total cover per transect
      total_tcov = sum(tcov, na.rm = TRUE),  # Calculate total cover per transect
      meets_2_percent = ifelse(total_tcov >= 2, "Yes", "No")  # Check if cover >= 2%
    ) %>%
    ungroup()
}

# Applying the function to your data
transect_cover_summary <- summarize_transect_cover_filtered(r3)

# View the summarized data
transect_cover_summary %>% filter(year == 2024) %>%
  datatable(
    options = list(
      autoWidth = TRUE,    # Ensure the table takes full width
      scrollX = TRUE,      # Enable horizontal scrolling if needed
      columnDefs = list(list(width = '100%', targets = "_all")),  # Set all columns to 100% width
      dom = 'Bfrtip',   # Add buttons to the table (B)
      buttons = c('csv')  # Specify 'csv' as the button type
    ),
    extensions = 'Buttons', # Enable Buttons extension
    filter = 'top'          # Enable filtering options for each column
  )

```

```{r transect-summary}
# Group by parcel and summarize the transects meeting the 2% threshold
transect_summary <- transect_cover_summary %>% filter(year == 2024) %>%
  group_by(parcel) %>%
  summarise(
    transects_at_2_percent = paste0(sum(meets_2_percent == "Yes"), "/", n())  # Count Yes and total
  )

# # View the summary
# transect_summary%>% 
#   datatable(
#     options = list(
#       autoWidth = TRUE,    # Ensure the table takes full width
#       scrollX = TRUE,      # Enable horizontal scrolling if needed
#       columnDefs = list(list(width = '100%', targets = "_all")),  # Set all columns to 100% width
#       dom = 'Bfrtip',   # Add buttons to the table (B)
#       buttons = c('csv')  # Specify 'csv' as the button type
#     ),
#     extensions = 'Buttons'  # Enable Buttons extension
#   )

```

# parcel summary table
```{r}
#| layout-ncol: 1
#| layout-span: full  # Extend the table across the full width
#| tbl-cap: "Whether perennial cover is above 10%, species with 3 hits, species richness at least 10, all transects at 2% cover, and grass species on parcel."
summary_table <- parcel_sum %>% 
  filter(year == 2024) %>% 
  left_join(count_hit_species_per_parcel, by = 'parcel') %>% 
  left_join(count_grass_species, by = 'parcel') %>% 
  left_join(transect_summary, by = 'parcel') %>% 
  left_join(species_richness_parcel, by = 'parcel')
# 
# summary_table %>% select(parcel, Cover, Shrub, Herb, Grass, count_3hit_species,sp_richness,transects_at_2_percent,grass_species) 

# %>% datatable()

# Create your summary table with CSV export option
summary_table %>% 
  select(parcel, Cover, Shrub, Herb, Grass, count_3hit_species, sp_richness, transects_at_2_percent, grass_species) %>% 
  datatable(
    options = list(
      autoWidth = TRUE,    # Ensure the table takes full width
      scrollX = TRUE,      # Enable horizontal scrolling if needed
      columnDefs = list(list(width = '100%', targets = "_all")),  # Set all columns to 100% width
      colnames = c('3hit_species' = 'count_3hit_species'),
      dom = 'Bfrtip',   # Add buttons to the table (B)
      buttons = c('csv')  # Specify 'csv' as the button type
    ),
    extensions = 'Buttons', # Enable Buttons extension
    filter = 'top'          # Enable filtering options for each column
  )
```

# cover histogram across transects 2022 vs 2024

```{r histogram-compare}
#| layout-ncol: 1
#| layout-span: full  # Extend the table across the full width
#| fig-width: 15
#| fig-align: center

# Faceted histogram by year and color-coded based on meets_2_percent
transect_cover_summary %>% filter(parcel != 'LAW129') %>% ggplot( aes(x = total_tcov, fill = meets_2_percent)) +
  geom_histogram(binwidth = 1, color = "black") + 
  geom_vline(xintercept = 2, color = "red", linetype = "dashed", size = 1) +  # Vertical line at 2% threshold
  # annotate("text", x = 2.5, y = Inf, label = "2%", color = "red", vjust = 1.5, angle = 90) +  # Label the threshold
  # Vertical line at 2% threshold
  scale_x_continuous(breaks = c(seq(0, 30, by = 5), 2),  # Add a custom break at 2%
                     labels = c(seq(0, 30, by = 5), "2%")) +  # Label the 2% tick
  scale_fill_manual(values = c("red", "darkgreen")) +  # Color code based on meets_2_percent
  labs(title = "Transect Perennial Cover distribution in 2022 and 2024 across Laws 90, 94 and 95.",
       x = "Total Perennial Cover",
       y = "Number of Transects") +
  facet_wrap(~year,ncol = 1) +  # Facet by year
  theme_minimal() +
  theme(legend.position = "none")  # Remove the legend

```

# maps

species change by transect

```{r}

parcelset <- parcels_shp %>% filter(PCL %in% c("LAW090", "LAW094", "LAW095"))

calculate_cover_difference <- function(data) {
  # Remove geometry temporarily to handle pivoting
  data_no_geometry <- st_drop_geometry(data)

  # Group by necessary columns and calculate the mean percent_cover
  cover_diff_data <- data_no_geometry %>%
    group_by(parcel, transect, species, year) %>%
    summarise(percent_cover = mean(percent_cover, na.rm = TRUE), .groups = 'drop') %>%

    # Pivot wider to compare 2022 and 2024 data
    pivot_wider(
      names_from = year,
      values_from = percent_cover,
      names_prefix = "cover_"
    ) %>%

    # Replace NAs with 0 in both cover_2022 and cover_2024
    mutate(cover_2022 = replace_na(cover_2022, 0),
           cover_2024 = replace_na(cover_2024, 0)) %>%

    # Calculate the difference between 2024 and 2022
    mutate(cover_diff = cover_2024 - cover_2022) %>%

    # Ensure unique records
    distinct(parcel, transect, species, cover_2022, cover_2024, cover_diff)

  # Join geometry back into the dataset, ensuring no duplicates are created
  result_with_geometry <- left_join(cover_diff_data,
                                    distinct(select(data, parcel, transect, geometry)),
                                    by = c("parcel", "transect"))

  return(result_with_geometry)
}

# Step 3: Apply the functions to your data
# cover_diff_data <- calculate_cover_difference(r1)
# Apply the function to r1
cover_diff_data <- calculate_cover_difference(r1)

# Pivoting the data longer to create the 'year_compare' column and ensure no duplicates
cover_diff_data_long <- cover_diff_data %>%
  pivot_longer(
    cols = starts_with("cover_"),
    names_to = "year_compare",
    values_to = "percent_cover"
  ) %>%
  mutate(year_compare = recode(year_compare, 
                               "cover_2022" = "2022", 
                               "cover_2024" = "2024", 
                               "cover_diff" = "Difference")) %>%
  # Remove any duplicates (if they exist)
  distinct(parcel, transect, species, year_compare, percent_cover, geometry) %>%
  # Reattach the geometry and ensure the dataset is still an sf object
  st_as_sf()


```

```{r}
bubble_maps_with_parcels <- function(data, parcels) {
  ggplot(data) +
    # Adding parcel boundaries with no fill and a black outline
    geom_sf(data = parcels, fill = NA, color = "black", size = 0.5) +
    
    # Add text labels for parcels using the PCL field
    geom_sf_text(data = parcels, aes(label = PCL), size = 3, color = "black", fontface = "bold") +
    
    # Mapping the size of the points to the absolute percent cover and coloring based on the percent change
    geom_sf(aes(size = abs(percent_cover), 
                color = case_when(
                  percent_cover > 0 ~ "positive",
                  percent_cover < 0 ~ "negative",
                  percent_cover == 0 ~ "zero"
                ), geometry = geometry)) +  
    coord_sf() +
    
    # Adjust the size breaks to have more granular control over point sizes
    scale_size_binned(breaks = c(0, 2, 4, 6, 8, 10), range = c(0.1, 6)) +
    
    # Apply color scale for three categories: red for negative, white for zero, green for positive
    scale_color_manual(
      values = c("negative" = "red", "zero" = "white", "positive" = "green"),
      guide = guide_legend(override.aes = list(size = 5))  # Adjust the size of the legend points
    ) +
    
    # Facet by species and year_compare to see changes per species over years
    facet_grid(species ~ year_compare) +
    
    # Move legend to the bottom and adjust its layout
    theme(
      axis.text.x = element_blank(),
      axis.text.y = element_blank(),
      axis.ticks.x = element_blank(),
      axis.ticks.y = element_blank(),
      axis.title.x = element_blank(),
      axis.title.y = element_blank(),
      plot.title = element_blank(),
      legend.position = "bottom",
      legend.box = "vertical",  # Stacks the legends vertically
      strip.text.y = element_text(angle = 0, hjust = 0.5)
    )
}
```

ATTO/ERNA
```{r}
# Apply the function with the updated long dataset and the parcel shapefile
long <- cover_diff_data_long %>% filter(parcel != "LAW129", species %in% c("ATTO", "ERNA10"))
all_plot_with_parcels <- bubble_maps_with_parcels(long, parcelset)

# Print the resulting plot
print(all_plot_with_parcels)


```

ATPO/ATCA2
```{r}
# Apply the function with the updated long dataset and the parcel shapefile
long <- cover_diff_data_long %>% filter(parcel != "LAW129", species %in% c("ATPO", "ATCA2"))
all_plot_with_parcels <- bubble_maps_with_parcels(long, parcelset)

# Print the resulting plot
print(all_plot_with_parcels)

```

DISP/SPAI
```{r}
# Apply the function with the updated long dataset and the parcel shapefile
long <- cover_diff_data_long %>% filter(parcel != "LAW129", species %in% c("DISP", "SPAI"))
all_plot_with_parcels <- bubble_maps_with_parcels(long, parcelset)

# Print the resulting plot
print(all_plot_with_parcels)
```

```{r}


# Apply the function with the updated long dataset and the parcel shapefile
long <- cover_diff_data_long %>% filter(parcel != "LAW129", species %in% c("LETR5","LECI4","ACHY"))
all_plot_with_parcels <- bubble_maps_with_parcels(long, parcelset)

# Print the resulting plot
print(all_plot_with_parcels)
```

